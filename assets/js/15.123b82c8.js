(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{369:function(t,a,s){"use strict";s.r(a);var n=s(7),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"协程与子程序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协程与子程序"}},[t._v("#")]),t._v(" 协程与子程序")]),t._v(" "),s("p",[t._v("协程的概念需要和子程序做对比。子程序就是协程的一种特例\n子程序即使函数调用，这种方式是严格的顺序执行的；而协程从语义上可以实现在两个函数之间来回跳转的效果，类似于中断实现方式")]),t._v(" "),s("h3",{attrs:{id:"协程与多线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协程与多线程"}},[t._v("#")]),t._v(" 协程与多线程")]),t._v(" "),s("p",[t._v("然而协程并不是线程，在具体的实现上，协程依然是单线程执行，切换依赖于软件程序的控制。而线程则是cpu在执行代码时候做的策略。\n因此协程无需关注多线程引起的关于并发问题。")]),t._v(" "),s("h3",{attrs:{id:"多次进入一个函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多次进入一个函数"}},[t._v("#")]),t._v(" 多次进入一个函数")]),t._v(" "),s("p",[t._v("由于协程可以在一个方法执行的中途中断，转而去执行别的协程的方法，并在未来返回到中断位置继续执行，这样就有可能出现多次进入同一个方法的情况")]),t._v(" "),s("h3",{attrs:{id:"yield关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#yield关键字"}},[t._v("#")]),t._v(" yield关键字")]),t._v(" "),s("p",[t._v("向另一个协程让出执行权利")]),t._v(" "),s("h3",{attrs:{id:"协程与异步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协程与异步"}},[t._v("#")]),t._v(" 协程与异步")]),t._v(" "),s("p",[t._v("设想一个简单的读写磁盘io的程序:")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("fun "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read_io")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这段程序很好的完成了工作，但考虑到每次执行write或者read方法都得阻塞等待系统返回，我们希望提供执行效率")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("fun "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read_io")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" write_callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nfun "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write_callback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" read_callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nfun "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read_callback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// finish")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("尽管现在read_io方法执行效率大大提高了，可是程序本身也变得十分臃肿。协程的实现看起来就优雅许多")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("fun "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read_io")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    yield "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    yield "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);