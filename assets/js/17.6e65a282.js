(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{368:function(t,a,r){"use strict";r.r(a);var s=r(7),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p",[t._v("面向对象主要两种实现的方向：面向原型或者面向类\n典型的代表分别是 javascript 和 java")]),t._v(" "),r("h3",{attrs:{id:"区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[t._v("#")]),t._v(" 区别")]),t._v(" "),r("p",[t._v("基于类的语言提倡使用一个关注分类(横向)和类之间关系(纵向)开发模型。\n与此相对，原型编程看起来提倡程序员关注一系列对象实例的行为，而之后才关心如何将这些对象划分到最近的使用方式相似的原型对象，而不是分成类。")]),t._v(" "),r("p",[t._v("从谁更适合用来描述现实世界的角度看来，原型更加现实。一个很好的例子：\n例如工厂造一辆车，一方面，工人必须参照一张工程图纸，设计规定这辆车应该如何制造。这里的工程图纸就好比是语言中的接口 ，而车就是按照这个接口制造出来的；\n另一方面，工人和机器 ( 相当于 constructor) 利用各种零部件如发动机，轮胎，方向盘 ( 相当于 prototype 的各个属性 ) 将汽车构造出来。")]),t._v(" "),r("h3",{attrs:{id:"一切皆对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一切皆对象"}},[t._v("#")]),t._v(" 一切皆对象")]),t._v(" "),r("p",[t._v("这个被面相类编程的 Java 作为核心思想的信条实际上并不是那么的符合实际。")]),t._v(" "),r("ol",[r("li",[t._v("实际上很少方法是真的属于一个对象的，很多时候方法仅仅是作为数据转换的工具")]),t._v(" "),r("li",[t._v("类里面的静态变量是个为了妥协类结构的设计，违反一切皆对象的思想")])])])}),[],!1,null,null,null);a.default=e.exports}}]);