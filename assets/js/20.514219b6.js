(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{372:function(v,a,_){"use strict";_.r(a);var e=_(7),r=Object(e.a)({},(function(){var v=this,a=v.$createElement,_=v._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[v._v("关于类型系统我们经常会讨论一下概念:")]),v._v(" "),_("ol",[_("li",[v._v("类型安全")]),v._v(" "),_("li",[v._v("强类型、弱类型")]),v._v(" "),_("li",[v._v("静态类型、动态类型")])]),v._v(" "),_("h3",{attrs:{id:"类型和非类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类型和非类型"}},[v._v("#")]),v._v(" 类型和非类型")]),v._v(" "),_("p",[v._v("翻译自答案https://stackoverflow.com/questions/964910/is-javascript-an-untyped-language")]),v._v(" "),_("p",[v._v("在 Programming Language Theory 中，")]),v._v(" "),_("p",[v._v("untyped:")]),v._v(" "),_("ol",[_("li",[v._v("程序总是可以被编译出来")]),v._v(" "),_("li",[v._v("赋值行为总是可以成功")]),v._v(" "),_("li",[v._v("只存在一种类型")])]),v._v(" "),_("p",[v._v("与之相反，typed:")]),v._v(" "),_("ol",[_("li",[v._v("程序有可能不能被编译出来，也就是说有编译时检查")]),v._v(" "),_("li",[v._v("赋值行为有可能失败，存在类型检查")]),v._v(" "),_("li",[v._v("存在多种类型")])]),v._v(" "),_("p",[v._v("这种对类型和非类型的规定，实际上混合了多个概念，并不能准确判断一个语言")]),v._v(" "),_("h3",{attrs:{id:"类型安全"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类型安全"}},[v._v("#")]),v._v(" 类型安全")]),v._v(" "),_("p",[v._v("类型安全和大多数计算机科学概念一样，不存在一个准确的，统一的定义，但我们可以从他的特性描述")]),v._v(" "),_("p",[v._v("类型安全可以保证程序语义正确")]),v._v(" "),_("p",[v._v("编程语言是由其语法和语义构成。语法就是程序该怎么写。 语义就是程序的表述意义。\n以 c 语言数组越界作为一个例子:")]),v._v(" "),_("p",[v._v("char buffer[5];\nbuffer[5] = 'F';")]),v._v(" "),_("p",[v._v("这段程序可以运行，在语法上是正确的（因为可以正确的编译）；但在语义上是错误的，因为访问一个越界的元素是无意义的（c 语言中称之为 未定义行为）")]),v._v(" "),_("p",[v._v("类型系统就可以保证程序的语义正确。称之为 well-typed")]),v._v(" "),_("h3",{attrs:{id:"强制的类型不变性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#强制的类型不变性"}},[v._v("#")]),v._v(" 强制的类型不变性")]),v._v(" "),_("p",[v._v("类型安全保证表达式的类型必须与类型所声明的一致")]),v._v(" "),_("h3",{attrs:{id:"类型抽象和信息隐蔽"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类型抽象和信息隐蔽"}},[v._v("#")]),v._v(" 类型抽象和信息隐蔽")]),v._v(" "),_("p",[v._v("许多编程语言都允许数据抽象（也叫信息隐藏）。这些语言提供了一些抽象手段，比如提供类(classes)，模块(modules)，函数(functions)这样的概念。它们可以把内部的结构不暴露给使用者,面向接口编程，接口不变，实现变化。")]),v._v(" "),_("p",[v._v("类型结构是维护抽象级别的一个语法工具，也就是说，类型是构建可维护系统的最基础重要(fundamental)的角色。")]),v._v(" "),_("p",[v._v("程序是类型上的证明")]),v._v(" "),_("h3",{attrs:{id:"强类型、弱类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#强类型、弱类型"}},[v._v("#")]),v._v(" 强类型、弱类型")]),v._v(" "),_("p",[v._v("先定义一些基础概念:")]),v._v(" "),_("p",[v._v("Program Errors\ntrapped errors。导致程序终止执行，如除0，Java中数组越界访问\nuntrapped errors。 出错后继续执行，但可能出现任意行为。如C里的缓冲区溢出、Jump到错误地址")]),v._v(" "),_("p",[v._v("Forbidden Behaviours\n语言设计时，可以定义一组forbidden behaviors. 它必须包括所有untrapped errors, 但可能包含trapped errors.")]),v._v(" "),_("p",[v._v("well-behaved、ill-behaved\nwell-behaved: 如果程序执行不可能出现forbidden behaviors, 则为well behaved。否则为ill behaved...")]),v._v(" "),_("p",[v._v('总结：如果一种语言的所有程序都是well behaved——即不可能出现forbidden behaviors，则该语言为强类型;否则为弱类型\n注意："强类型"中的类型是一个伪概念，计算机科学中的类型指的是语言本身的属性，而这里讨论的强弱类型是编译器的行为')]),v._v(" "),_("h3",{attrs:{id:"类型安全和强类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类型安全和强类型"}},[v._v("#")]),v._v(" 类型安全和强类型")]),v._v(" "),_("p",[v._v("类型安全依赖于语言的语义，如果语义中well-behaved能够保证覆盖到类型安全的特性的话，那么它也就是类型安全的。\n另外，也正说明类型安全不是万能的，因为有可能该语言的语义存在没有覆盖到的地方")]),v._v(" "),_("h3",{attrs:{id:"静态类型、动态类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#静态类型、动态类型"}},[v._v("#")]),v._v(" 静态类型、动态类型")]),v._v(" "),_("p",[v._v("伪概念，实际上说的是 运行时类型检查 和 编译时类型检查\n类型这个词应该出现在语言的语义设计中，即上面讨论的类型安全方面的讨论中；而检查类型这个行为应该放到编译器解析器中讨论")]),v._v(" "),_("p",[v._v("现阶段而言，实现了编译时类型检查的有 c 和 java 等；而 运行时类型检查的有 python、php等")]),v._v(" "),_("p",[v._v("而对于 javascript，根本就不存在类型系统，也就说不上类型检查了，但从表面上看 javascript 会在运行上对不存在的方法报错，所以他是运行时检查（注意没有类型）")])])}),[],!1,null,null,null);a.default=r.exports}}]);