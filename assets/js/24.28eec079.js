(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{375:function(t,s,a){"use strict";a.r(s);var n=a(7),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("计算机只认识0和1，为了显示字符，我们规定一套编码规则来确定这些字符用什么二进制数据表示\n所谓的编码其实就是一种翻译过程，输入一个16进制数字，某种编码（比如ascii编码）就是一张表，输出这个16进制数字对应的字符")]),t._v(" "),a("h3",{attrs:{id:"ascii-到-utf8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ascii-到-utf8"}},[t._v("#")]),t._v(" ascii 到 utf8")]),t._v(" "),a("p",[t._v("一开始只有127个字符编码到计算机，包含大小写英文字母和一些符号，这套规则成为 ascii编码。127个字符用一个字节就可以表示\n随着计算机的推广，不同国家的人都需要在上面显示自己国家的文字，ascii码不能满足需求，于是在ascii基础上，扩展出了各种适合本国的编码规则，比如中国的gbk2312，日本的Shift_JIS。这些字符数量庞大，使用多个字节去容纳整套编码规则。")]),t._v(" "),a("p",[t._v("各种不同的编码自然带来混乱，unicode编码应运而生。它对所有语言都使用2个字节来表示（也有比较孤僻的字符需要用到4个字节），并且得到大部分计算机和编程语言的支持。我们应该有这样一个认识，unicode标准是给计算机用的，为了兼容所有编码")]),t._v(" "),a("p",[t._v("然而，使用多个字节来表示字符很多情况下都是一种浪费（比如可以用1个字节表示的ascii码），因此推出一种可变长的编码-utf8编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节")]),t._v(" "),a("p",[t._v("一下是几种编码规则的二进制表示\n字符 ASCII Unicode UTF-8\nA 01000001 00000000 01000001 01000001\n中 x 01001110 00101101 11100100 10111000 10101101")]),t._v(" "),a("p",[t._v("当我们使用记事本时，编码的转换过程如下")]),t._v(" "),a("p",[t._v("当我们使用浏览器浏览网页时，编码的转换过程如下")]),t._v(" "),a("p",[t._v("到这里，我们可以对这几种编码有一个直觉的感受:\nunicode标准只存在于内存，包括计算机传输数据\nascii、utf8、gbk2312等决定是怎样的规则保存在磁盘中和显示到页面，此时需要考虑不同规则所映射的字符不同")]),t._v(" "),a("h3",{attrs:{id:"乱码的本质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#乱码的本质"}},[t._v("#")]),t._v(" 乱码的本质")]),t._v(" "),a("p",[t._v("我们在记事本输入一段中文文本，无论选择以哪一种编码保存（文件编码本身已经改变），都能正确显示\n假设我们以ascii编码保存了文件（文件编码本身已经改变），此时选择以utf8显示（注意，此处只是显示，文件编码本身没有改变），乱码出现了；同样的情况也出现在用utf8保存，然后以ascii显示的情况")]),t._v(" "),a("p",[t._v("乱码出现的原因是计算机无法根据当前指定的翻译规则能够显示的字符，ascii编码中的字符并不是都能在utf8中找到")]),t._v(" "),a("h3",{attrs:{id:"编程语言中的编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编程语言中的编码"}},[t._v("#")]),t._v(" 编程语言中的编码")]),t._v(" "),a("p",[t._v("以python为例，python是一门支持多语言的编程语言，python3是使用unicode编码的，这意味着所有存在的字符都是以unicode编码的形式在计算机中传输的，比如显示")]),t._v(" "),a("p",[t._v("一般情况下，打印的内容我们是无法感知到是用什么编码的，传输数据的过程中这些打印内存都是以二进制存在的，为了让这些二进制数据能够显示出来，我们规定一些符号作为标识")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\u4e2d\\u6587'")]),t._v("\n")])])]),a("p",[t._v("'中文'")]),t._v(" "),a("p",[t._v("\\u是python用来表示unicode编码的格式\n可以看出，两种显示对计算机来说是一样的东西")]),t._v(" "),a("p",[t._v("python中的encode方法可以将unicode编码字符串按照指定的编码打印出来，打印出来的是二进制版本的字符")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ABC'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("encode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ascii'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("b'ABC'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'中文'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("encode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf-8'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'")]),t._v("\n")])])]),a("p",[t._v("输出结果前面有个b，由于我们没法直接显示一个二进制数据，Python规定b为前缀的字符串就表示byte类型\n在bytes中，无法显示为ASCII字符的字节，用\\x##显示\ndecode方法是encode的逆过程")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("b'\\xe4\\xb8\\xad\\xff'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("decode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf-8'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" errors"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ignore'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("'中'")]),t._v(" "),a("p",[t._v("同样的，python解析器也需要规定一种编码才能正确读到源代码，一般都规定使用utf-8格式编码")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/env python3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -*- coding: utf-8 -*-")]),t._v("\n")])])]),a("p",[t._v("此处 coding: utf-8 表示python解析器将以utf8形式读取源代码\n注意，这里选择utf-8不代表文件本身的格式就是utf-8")])])}),[],!1,null,null,null);s.default=e.exports}}]);